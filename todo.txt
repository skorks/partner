long option with string value
  - an option we recognise was passed and it had a value                        DONE
    - it should end up in the options list                                      DONE
    - result should indicate that it was given on the command line              DONE
  - an option we recognise was passed in but it didn't have value               DONE
  - an option was passed in but not one we recognise                            DONE
  - an option was not passed in but has default                                 DONE
    - should be present in the final option list with default value             DONE
    - the result should indicate that it was not passed in on the command line  DONE
  - configured to have different value to the canonical name                    DONE
    - if not present make from canonical name                                   DONE
    - must ensure starts with -- if not already                                 DONE
    - if starts with single dash, that's an error                               DONE
    - must have only dashes and small letters in it                             DONE
    - if starts with more than 2 dashes that's an error                         DONE

error when non boolean option is passed in on the command line without a value

short options with string value
  - configuration
    - default case, it is just the one char                                             DONE
    - can be 1 or 2 chars                                                               DONE
    - if two chars first char must be -                                                 DONE
    - second char (or first if one char) must be small letter, capital letter or number DONE
    - must not conflict with existing short name                                        DONE

canonical name can't conflict             DONE
long name can't conflict                  DONE
short name can't conflict                 DONE

long option with boolean value
  - no default given should default to false                        DONE
  - passed on the command                                           DONE
    - should be in the given list                                   DONE
    - should have a value of true                                   DONE
  - default value given should default to that default value        DONE
  - non-boolean default value given, should error                   DONE

short option with boolean value                                     DONE

negated long option (boolean value)
  - for legitimate boolean value                                    DONE
  - for a non-boolean should error                                  DONE

combined short options (-xyz)                                       DONE

multi value short option                                            DONE

multi value long option                                             DONE

short option with value in single or double quotes                  DONE

long option with value in single or double quotes                   DONE

token -- by itself ends option processing                           DONE


short option with value separated by equals
  - value not in quotes
  - value in singel or double quotes

long option with value separated by equals
  - value not in quotes
  - value in singel or double quotes

type is an integer

type is a double

multi value has an item type of integer

multi value has an item type of double

can configure a command
  - can configure options for command


less important or implement later
----------------------------------
value is array
value is hash





* Extract building the options with default values from the options parser


thoughts
---------
the concept of a value source for options and priority for value sources to facilitate injecting config file defaults easily

require 'shellwords'

argv = Shellwords.split('three blind "mice"')

feature list
-------------
- when options is parsed a provided lambda is called and given the parsed value for the option
- when an unexpected options is given, writes an error and exits
- double dash followed by string should be considered a single option
- single dash followed by char should be considered a single option
- single dash followed by string should be considered multiple boolean options
- options that take an argument error unless they are given one
- flags that don't take arguments ignore them
- flags that require arguments of a given type, refuse arguments of other types
- flags that have a default value, can derive a type from that value
- type and default value must match
- short names can be derived automatically unless given
- two args can't have the same short
- two args can't have the same long
- switches can be negated with --no-
- double dash ends options processing
- options can be specified multiple times if they are a list option
- boolean options can not be list types
- when long names are auto generated they convert underscores to dashes
- options can be marked as conflicting and can't be specified together
- options can be marked as dependent and must be specified together
- options can be marked as required and must be provided
- argument values can have spaces if wrapped in quotes single or double
- argument value can be separated from switch using space or using = without spaces


- support options that can be specified multiple times and their values should be bundled into a list DONE
- implement command support                                                                           DONE
- make sure default values are taken into account during parsing (pre parsing)                        DONE
- support required options                                                                            DONE
- make sure we error out correctly when erroneous conditions occur (e.g. unknown option etc )      DONE
- support more different option types (integer, float) and allow casting correctly                 DONE
- get some logging happening and allow a logger to be configurable                                 DONE
- figure out a way to supply syntax definitions which can be mapped to out configuration objects   DONE
- create a basic syntax definition                                                                 DONE
- work out how the parser will actually be configured with options and how it will get access to the config object
- support generating long option name from canonical name for options before parsing               DONE
- support generating short options name from canonical name and other options before parsing
- support deriving type from the default value before parsing for all options
- write a whole bunch of high level tests to make sure all the functionality works as appropriate
- type and default value must match
- long, short and canonical names can't conflict
- make sure that we can spit out a result that's useful (i.e. we can access all the things we need in reasonable format)
- support dependant options
- support conflicting options
- should be able to have string aliases for types (integer, int, i)
- should be able to have aliases for option names (--foo is the same as --bar or --baz)

- validations for option values
- should not raise errors outside of the Partner namespace, so all errors during use can be rescued easily
- should we be able to suppress errors?????
- what about some way to print out some basic usage for the command line app
- ability for user to define their own custom types similar to how slop does it
- ability for the user to define custom pre parsing steps
- ability for the user to define custom post parsing steps
- ability for the user to define their own custom types of tokens with a matcher and a processor for fully custom behaviour
- aliases for options, so they can be known by multiple names
- single hyphen prefix for long options ???
- try out creating alternative syntax definitions outside of the partner namespace

- audit trollop tests to make sure we can do everything that trollop can do as well
- write a bunch of lower level unit tests to ensure non-breakiness of specific classes
- implement defining argument types and argument checking after parsing is done
- implement ability to prompt for value of an option ???
